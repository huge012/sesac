# -*- coding: utf-8 -*-
"""05. 파이썬 - 마무리.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uOb8a-Z7kOMH1KISYB-Y7DTvbZELbLhF

#소개

파이썬 - 보아구렁이

많은 모듈을 포함하여 사용할 수 있는 인터페이스 언어

## 자료형

숫자

    정수 : int
    실수 : float
    복소수 : complex

문자열

    str

변수

    자료를 사용하기 위해 변수에 값을 기억시키고 필요할 때 사용한다.

기본 출력, 기본 입력

    print(값 or 변수)
    print(1)
    print(a)
    print(1, 2, 'a')
    print("{0} + {1} = {1} + {0} = {2}".format(a, b, a+b))
    print("{0:02d}".format(a))
    print("{0:.3f}".format(b))
    print(f"학생 수 : {a:02d}")


기본 입력

    입력한 내용을 문자열로 반환한다
    만약 정수를 입력받기를 원하면 입력받은 문자열을 정수로 형변환한다.

    num = int(input("번호 : "))

##조건문

논리 연산자

    and , or , not
  
비교 연산자

    < , > , <= , >= , != , ==

if 조건식

    if 조건식1 :
      (조건식1) 참일 때 수행할 구문
    elif 조건식2 :
      (조건식2) 참일 때 수행할 구문
    else:
      모두 거짓일 때 수행할 구문

##반복문과 컬렉션

튜플

    요소로 구성하는 자료구조(컬렉션)
    요소 값을 변경할 수 없다

    tuple
    ( 값, 값, 값, ... )

리스트

    요소로 구성하는 자료구조(컬렉션)

    list
    [ 값, 값, 값, ... ]

딕셔너리

    (키):(값) 쌍으로 되어있는 데이터를 요소로 구성하는 자료구조(컬렉션)
    
    dict
    { 키:값, 키:값, ... }

for문

    for 변수 in 컬렉션:
      ... 변수에 대한 작업 ...

while문

    전통적인 반복문
    반복문 중간에 탈출 구문 break
    반복문 중간에 아래 생략하고 조건 비교로 올라가는 continue

    while 조건문:
      수행문

##함수

자주 사용하는 알고리즘을 블럭화하고 블럭에 이름을 부여

필요할 때 부여한 이름을 호출하여 사용

    def 함수명(입력 매개변수 목록):
      해야할 일
      return 반환값

    # 함수 중간에 결과를 반환할 때 return문 사용
    
호출할 때는 함수명(입력인자)

    변수 = 함수명(입력인자)

    # 반환 값을 받아서 사용하는 것은 선택 사항

인자 종류 - 일반 매개변수, 디폴트 매개변수, 가변인자 매개변수

    def 함수명(변수=default값, *가변인자):
      해야 할 일

##예외처리

프로세스가 더 이상 동작하지 못하는 상황일 때 예외가 발생한다

(내부적으로 raise 구문으로 예외 발생시킨 것)

    try:
      예외가 발생할 수 있는 코드 블럭
    except 예외1:
      예외1 처리
    except 예외2:
      예외2 처리
    else:
      예외 발생하지 않았을 때 처리
    finally:
      예외가 발생하든 하지 않든 반드시 해야하는 처리

##모듈

특정 목적을 위한 코드를 하나의 소스 파일에 정의한 것

    파일명 : 모듈명

Abcd.py 파일이 있을 때, 모듈 이름은 Abcd
    
    import Abcd

Abcd 모듈에 foo 함수가 있을 때

    Abcd.foo()

축약해서 사용할 때

    from Abcd import foo

    foo()

모듈 이름을 축약(별칭)

    import Abcd as A

    A.foo()

#클래스

프로그램에서 관리할 데이터 등을 개발자가 형식으로 정의하여 사용할 수 있다

클래스를 이용하면 멤버 필드와 멤버 메서드를 캡슐화할 수 있다

클래스의 파생 문법을 이용하면 기반 형식의 멤버를 상속받을 수 있다

기반 형식에 정의한 메서드를 파생 형식에서 다시 정의하면 재정의로 취급한다

멤버 이름이 __로 시작하면 가시성 차단(private)
"""