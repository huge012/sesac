# -*- coding: utf-8 -*-
"""02. 통계분석시각화 - Numpy More.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GF6sULbd8v7h3Um4HCzO8RCK_f8XrjMY

# 행렬의 기본 연산
"""

import numpy as np

# 리스트의 연산
ls1 = [1, 2]
ls2 = [3, 4]
ls3 = ls1 + ls2
print(ls3)

s = 0
for i in range(10):
  s += i
# 반드시 ~ 해야만 한다고 설정
assert s == 45, "s는 45여야 합니다."

# ls 목록에 있는 요소의 합계를 구하는 함수
def calsum(ls):
  s = 0
  for e in ls:
    s += e
  return s-1

assert calsum([1, 2, 3, 2]) == 8, "calsum([1,2,3,2]) 값은 8이어야 합니다."

# 행렬 연산
def add(l1, l2):
  assert len(l1) == len(l2), "더하기 연산을 위해서는 요소의 길이가 같아야 한다"
  re = []
  for i in range(len(l1)):
    re.append(l1[i] + l2[i])
  return re

ls1 = [1, 2]
ls2 = [3, 4]
ls3 = add(ls1, ls2)
print(ls3)

n1 = np.array([1, 2])
n2 = np.array([3, 4])
n3 = n1 + n2
print(n3)

n3 = n1 - n2
print(n3)

ls1 = [1, 2, 3, 4]
ls2 = ls1 * 3 # 같은 배열 세 번 중복
print(ls2)

n1 = np.array([1, 2, 3, 4])
n2 = n1 * 3
print(n2)

n2 = n1 / 3
print(n2)

# 리스트 필터링
n1 = np.random.randint(1, 1000, 100, dtype=int)
print(n1)

n2 = n1 > 500
print(n2)

n3 = n1[n2]
print(n3)

# 행렬 내적
n1 = np.array([[1, 2], [3, 4]])
n2 = np.array([4, 5])
n3 = np.dot(n1, n2)
print(n1)
print(n2)
print(n3)

n1 = np.array([1, 2, 3, 4])
n2 = n1.reshape((2, 2))
print(n2)

# 전치행렬
n3 = np.transpose(n2)
print(n3)

# 행렬 반전 
n3 = np.invert(n2)
print(n3)

# 역행렬
n3 = np.linalg.inv(n2)
print(n3)

n4 = n2.dot(n3)
print(n4)

# 표준정규분포 구하기 - 평균 0 만들기
n1 = np.array([1, 2, 3, 4])
n2 = n1 - 3
print(n2)

# 표준정규분포 구하기 - 표준편차 1 만들기
n2 = n1 / 3
print(n2)

"""통계 관련"""

n1 = np.random.randint(1, 100, 30, dtype=int)
print(n1)

print("길이 : ", len(n1))
print("평균 : ", n1.mean())
n2 = n1 - n1.mean()
print("수평 이동한 후 평균 : ", n2.mean())
print("최대값 위치 : ", n1.argmax())
print("최대값 : ", n1.max())
print("분산 : ", n1.var())
print("표준편차 : ", n1.std())
n2 = n1/n1.std() # 기존 요소 / 표준편차
print("스케일 조정 후의 표준편차 : ", n2.std())
print("최솟값 : ", n1.min())
print("중앙값 : ", np.median(n1))
print("1/4분위값 : ", np.percentile(n1, 0.25))
print("2/4분위값 : ", np.percentile(n1, 0.50))
print("3/4분위값 : ", np.percentile(n1, 0.75))
print("4/4분위값 : ", np.percentile(n1, 1.00))
print("원본 : ", n1)
print("누적 합 : ", np.cumsum(n1))
n1 = np.arange(1, 10)
print("원본 : ", n1)
print("누적 곱 : ", np.cumprod(n1))