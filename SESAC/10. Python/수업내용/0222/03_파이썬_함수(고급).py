# -*- coding: utf-8 -*-
"""03.파이썬 - 함수(고급).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OYUVTIiDFaj-oQZMcqTIuC_beg4TOfGM

# 튜플
여러 개의 요소로 구성한 컬렉션

요소의 값을 변경할 수 없다.
"""

t1 = (1, 2, 3)
print(type(t1))

print(t1[0])

# t1[0] = 7 tuple은 요소의 값을 변경할 수 없다.

def get_sum_average(numbers):
  s = 0
  for number in numbers:
    s += number
  return s, s/len(numbers) # 여러개의 값 반환 가능 (튜플로 반환)

s, aver = get_sum_average([1, 2, 4, 3, 54, 5, 6])
print(f"합계:{s}, 평균:{aver:.2f}")

re = get_sum_average([1, 2, 4, 3, 54, 5, 6])
print(re)
print(type(re))

t = 1, 2, 3, 4
print(type(t))

a, b, c = 1, 2, 3 # (1, 2, 3)은 튜플, a, b, c는 각각 int형 변수
print(type(a), type(b), type(c))

a = 2
b = 3
print(a, b)
a, b = b, a
print(a, b)

"""# 람다식
로직이 아주 간단한 알고리즘을 선언

함수와 유사하나 훨씬 단순함

"""

def square(x):
  return x*x

sq = lambda x:x*x # lambda (매개변수):(할 일), 변수에 담을 수 있음

def foo(x):
  print(f"foo({x})")
  return 2*x

re = map(foo, [1,2,3,4]) # map(함수명, 리스트) - 리스트에 있는 각각의 인자를 함수에 대입하여 호출하게 함 (mapping해줌), 리턴값으로 이루어진 리스트 반환
# print(list(re))
for e in re :
  print(e)

re = map(sq, [1,2,3,4]) # map() 함수에 람다식도 넣을 수 있음
for e in re:
  print(e)

re = map(lambda x:x+2, [1,2,3,4]) # 1회성 람다식도 넣을 수 있음
for e in re:
  print(e)

def is_odd(x):
  return x % 2 == 1

re = filter(is_odd, [1,2,3,4,5,6,7,8,10,23,4,23,11]) # filter(함수명, 리스트) - 해당하는 함수의 결과가 True인 경우만 반환
for e in re:
  print(e)

re = filter(lambda x : x%2==1, [1,2,3,4,5,6,7,8,10,23,4,23,11])
for e in re:
  print(e)