# -*- coding: utf-8 -*-
"""01.파이썬 - 함수(만들기).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TDw9ij4TDofoIG8kT-HMD1HRip17Nzw8

# 함수
자주 사용하는 알고리즘을 이름을 부여하여 만든 로직 (코드 블록)

로직 이름, 입력 매개변수 목록, 수행할 코드, 반환 값으로 구성.

입력 매개변수 목록과 반환 값은 생략 가능

- 함수를 만드는 것을 함수 정의

- 함수를 사용하는 것을 함수 호출
"""

# 함수 이름 : foo
# 입력 매개변수 : 2개 (a, b)
# 수행 코드는 두 개의 인자를 출력한 후 곱한 값을 반환
# 반환 값 : a*b
def foo(a, b):
  print(f"a:{a}, b:{b}")
  return a*b

re = foo(2, 3) # 함수 호출(반환값을 re에 대입)
print(f"결과:{re}")
foo(3, 4) # 함수 호출(반환값 무시)

def print_menu():
  print("1:데이터 추가")
  print("2:데이터 삭제")
  print("3:데이터 검색")
  print("4:전체 데이터 확인")
  print("0:종료")

def menu_select():
  print_menu()
  return int(input("메뉴 선택:"))

while True:
  key = menu_select()
  if key == 0:
    print("시스템 종료")
    break;
  if key == 1:
    print("데이터 추가")
  elif key == 2:
    print("데이터 삭제")
  elif key == 3:
    print("데이터 검색")
  elif key == 4:
    print("전체 데이터 확인")
  else:
    print("잘못 선택했습니다.")

"""특정 범위 수의 합계를 구하는 함수"""

def getsum(start, end):
  s = 0
  for i in range(start, end+1):
    s += i
  return s

s = int(input("시작 : "))
e = int(input("끝 : "))
print(f"{s}~{e} 합계: {getsum(s,e)}")
print(f"{1}~{100} 합계: {getsum(1,100)}")

# re = getsum(1, 2, 3) # 정의한 함수아 다르게 인자를 전달하고 있음 - Type Error
# print(re)

print()
print(1)
print(1, 2)
print(1, 2, end=" ")
print()

def soo(a, temp=1, yahoo='a'): # temp는 인자를 전달하지 않을 때 1을 디폴트값으로, yahoo의 디폴트 값은 'a'
  print(a, temp, yahoo)

soo(1)
soo(2, temp=2)
soo(3, yahoo=7)
soo(3, 4)
soo(3, 4, 5)

def zoo(n=2, *values):
  print("===========")
  print(n)
  for value in values:
    print(value, end=' ')
  print()

zoo()
zoo(2)
zoo(2, 3)
zoo(2, 3, 4, 5)

name = input("이름 : ")
print(f"이름 : {name}")

def square(x):
  return x*x

for i in range(1, 5):
  re = square(i)
  print(f"{i}의 제곱 {re}")

def find_nearest_sum(start, goal):
  s = 0
  while s < goal:
    s += start
    start += 1
    if (start == 100):
      return s
  print("find!!")
  return s

re = find_nearest_sum(1, 2000)
print(re)
re = find_nearest_sum(1, 20000)
print(re)