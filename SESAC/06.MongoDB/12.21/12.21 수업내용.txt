12.21 MongoDB

* 탈오라클 : NoSQL

*샤딩
- 분할된 배포를 사용하여 분산된 방식으로 데이터를 저장
- 대용량 데이터를 저장하거나 높은 처리량을 요구하는 애플리케이션에 필요

* 레플리카 셋


* BSON : 바이너리 제이슨
- json과 유사, 키와 값으로 구성

* ad hoc 쿼리
SQL : SELECT  FROM Posts WHERE Title LIKE '%mongo%';
MONGOSH : db.posts.find({title:/mongo/});

* Documents 구조
- 필드와 값 페어로 구성, 필드 안에 필드 들어가있을 수 있음

{
  "_id" : ObjectId("5da2685bfb4ef99de45a613a"), 
    "name" : "Helen", 
    "dateOfBirth" : new Date("Dec 25, 2007"), 
    "placeOfBirth" : "Brisbane", 
    "profession" : "Student", 
    "hobbies" : [ 
      "painting", 
      "football", 
      "singing", 
      “story-writing" 
 ], 
    "address" : { 
      "city" : "Sydney", 
     "country" : "Australia", 
     "postcode" : 2161 
   }
}


* 몽고디비
- 키 값에는 "" 필요없음, 값은 (스트링일 경우) 무조건 ""
- JSON에서는 키값도 "" 사용


* 데이터그립
- 자바 기반


* JSON
- 2013년 표준으로 지정
- XML -> JSON으로 변경됨
- 언어 독립적인 데이터 표현을 위한 구문

- key : string
- value : 문자, 숫자, bool, 오브젝트, 배열, null

- 제이슨 유효성 검사기
jsonlint.com

* BSON
- 몽고디비 외의 다른 시스템에서 데이터 저장/전송을 위한 형식
- 바이너리 형식
- 공간 적게 차지
- 필드 길이 또는 하위 문서 길이와 같은 일부 메타정보 저장
- 메타 정보는 문서 구문 분석과 탐색을 더 빠르게 만듦
- 배열의 각 요소에 색인 위치가 접두어로 붙어서 액세스 용이
- 날짜, 정수, double, 바이트 배열 등과 같은 추가 데이터유형 제공



* 필터링
- 조건으로 필터링, 비교연산자 사용
- 정규식 사용 : 더 쉽게 필터링 가능
- 조건부 및 논리연산자 조합을 쿼리에서 사용하여 필터링함
- 경량 쿼리언어 사용 (SQL보다 강력함)


* 스파크
- 하둡에서 인프라를 분산 처리하는 기술



* SQL과 MongoDB 같은 코드 비교하며 알아보는게 좋음

SELECT * FROM USERS WHERE name = 'David';
db.users.find({ "name": "David"})


20개씩 끊어서 보여줌
use sample_mflix

* find, findOne
db.movies.find() // 조건에 맞는 모든 요소 검색
db.movies.findOne() // 조건에 맞는 요소 한개 검색

* pretty()
보기 좋게 보여줌


* 다중 조건
// select cast, contries from movies where year = 2016
db.movies.find(
    {year: 2016},
    {cast: 1, contries: 1},
)




--


* 프로젝션 : 출력필드를 선택하는 것
_id필드는 명시적으로 제외하지 않는 한 항상 표시

* distinct() : 특정 키의 unique값을 보여줌. count랑 혼용 불가

// select distinct('genre') from movies where countries = 'South Korea';
db.movies.distinct(
    'genres',
    {countries: 'South Korea'}
).length

South Korea 필터링이 먼저 실행됨, projection이 제일 나중에 실행됨



* 문자를 숫자로 바꾸는 작업(encoding)을 해서 머신러닝을 시킴

* count() : 갯수 반환, collection에서만 사용 가능. distinct 뒤에는 사용 불가. 모든 데이터 스캔

* countDocument() : 갯수 반환, 속도 빠름, 메타데이터 이용

* 메타 데이터 : 데이터에 대한 정보

* 연산자
eq (==)
ne (!=)
gt (<)
gte (<=)
lt (>)
lte (>=)
in (in)
nin (not in)



* 날짜 nnnn-mm-dd : ISO 표준 날짜 표기법


* 레오나르도 디카프리오 출연&마틴스콜세즈 감독&(드라마or범죄)장르의 타이틀과 연도 출력
db.movies.find(
    {
        cast: "Leonardo DiCaprio",
        directors : "Martin Scorsese",
        $or: [{genres: "Drama"}, {genres:"Crime"}]
    },
    {
        title:1, year:1, _id:0
    }
)


* 정규식, Regular Expression : 모든 언어에서 공통적으로 사용하는 문법
vi에디터 정규식 사용


$regex : 일치하는 패턴을 가진 모든 문자열 검색
^ : 주어진 정규식으로 시작하는 문자열 검색
$ 주어진 정규식으로 끝나는 문자열 검색
$options : 대소문자 구분하지 않고 검색
limit : 결과 제한
skip(n) : 건너뛰기
sort() : 문서 정렬



------

db.(컬렉션이름).find( {조건}, {조건} )
db.(컬렉션이름).distinct( 조건, 조건 )