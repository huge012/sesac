# -*- coding: utf-8 -*-
"""02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QpwsFI8c4GzKB5QZNLYgjD0idtVgD1ol
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py
# %matplotlib inline

"""## KNN의 약점"""

perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(perch_length, perch_weight, random_state=42)

train_input = train_input.reshape(-1, 1)  # x값을 2차원(행렬형태)으로 바꿈
test_input = test_input.reshape(-1, 1)  # x값을 2차원(행렬형태)으로 바꿈

from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor(n_neighbors=3)
knr.fit(train_input, train_target)

knr.predict([[50]])

index = knr.kneighbors([[50]], return_distance=False)  # 가장 가까운 3개의 데이터에 대한 인덱스
index

train_input[index[0]]  # fency indexing (인덱스 정보를 줘서 데이터를 검출하는 방법)

train_input[index[0]].ravel()

train_target[index[0]]  # fency indexing

plt.scatter(train_input[:, 0], train_target)
plt.scatter(50, knr.predict([[50]])[0], marker='^')
# plt.scatter(train_input[index[0]], train_target[index[0]])
plt.scatter(train_input[index[0]].ravel(), train_target[index[0]], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

train_input[:, 0].max()

knr.predict([[200]])  # feature 최고치, 최저치를 넘는 값은 예측 불가

"""### numpy ndarray 연습"""

arr = np.arange(1, 13).reshape(-1, 3)
arr

arr.ndim, arr.shape

arr[0]

arr[0, :]

arr[0][:]

arr[:, 0]

arr[:, -1]

arr.ravel()  # array를 1차원으로 바꿔줌

arr.ravel()[::-1]  # array를 1차원으로 바꿔서 역순으로 가져옴

"""### 선형회귀"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(train_input, train_target)

lr.coef_, lr.intercept_  # 가중치, 편향

lr.coef_ * 50 + lr.intercept_  # 직접 계산

lr.predict([[50]])  # predict 활용

plt.scatter(train_input, train_target) # 학습데이터
plt.scatter(50, lr.predict([[50]])[0], marker="^") # 예측값
plt.plot([15, 50], [ lr.predict([[15]])[0], lr.predict([[50]])[0] ]) # 직선
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

lr.predict([[15]])

from sklearn.metrics import r2_score

print(f"train - r^2 score : {r2_score(train_target, lr.predict(train_input))}")
print(f"test - r^2 score : {r2_score(test_target, lr.predict(test_input))}")

train_poly = np.column_stack((train_input ** 2, train_input))
train_poly[:5]

test_poly = np.column_stack((test_input ** 2, test_input))
test_poly[:5]

lr = LinearRegression()
lr.fit(train_poly, train_target)

lr.coef_, lr.intercept_

lr.predict([[50**2, 50]])

p = np.arange(15, 51)

plt.scatter(train_input, train_target)
plt.scatter(50, lr.predict([[50**2, 50]]), marker='^')
plt.plot(p, 1.01*(p**2)-21.6*p+116)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

print(f"train - r^2 score : {r2_score(train_target, lr.predict(train_poly))}")
print(f"test - r^2 score : {r2_score(test_target, lr.predict(test_poly))}")