# -*- coding: utf-8 -*-
"""01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18C9zSntiZ41uSug6qAouoOE0SSIUYoHd
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py
# %matplotlib inline

"""## 지난 시간 : KNN 회귀"""

perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

plt.scatter(perch_length, perch_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(perch_length, perch_weight, random_state=42)

train_input = train_input.reshape(-1, 1)  # x값을 2차원(행렬형태)으로 바꿈
test_input = test_input.reshape(-1, 1)  # x값을 2차원(행렬형태)으로 바꿈

from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor()  # K = 5
knr.fit(train_input, train_target)

knr.score(test_input, test_target)  # 결정계수

from sklearn.metrics import mean_absolute_error

test_prediction = knr.predict(test_input)  # 예측값
mae = mean_absolute_error(test_target, test_prediction)  # MAE
print(mae)

"""## 과대적합과 과소적합"""

from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

r2_score(train_target,knr.predict(train_input))  # train score

r2_score(test_target, knr.predict(test_input))  # test score, underfit

# 하이퍼 파라미터(이웃 수)를 조정하여 과소적합 문제 해결하기
knr.n_neighbors = 3  # k 수 조정
knr.fit(train_input, train_target)  # 학습

r2_score(train_target,knr.predict(train_input))  # train score

r2_score(test_target, knr.predict(test_input))  # test score

# k-최근접 이웃 회귀 객체 생성
knr = KNeighborsRegressor()
# 5 ~ 45까지 x좌표 생성하기
X = np.arange(5, 45).reshape(-1, 1)  # 농어의 길이

# n = 1, 4, 10일 때 예측 결과를 그래프로 그리기
for n in (1, 5, 10):
  knr.n_neighbors = n
  knr.fit(train_input, train_target)  # 학습

  prediction = knr.predict(X)  # 예측

  plt.scatter(train_input, train_target)
  plt.plot(X, prediction)
  plt.title(f'n_neighbors = {n}')
  plt.xlabel('length')
  plt.ylabel('weight')
  plt.show()