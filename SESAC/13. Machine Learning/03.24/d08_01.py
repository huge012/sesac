# -*- coding: utf-8 -*-
"""d08_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r9i1E6PRIZykXkPlOKK9eiyB9yBj78qe
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

wine = pd.read_csv("https://bit.ly/wine_csv_data")
wine.head()

wine.info()

np.unique(wine['class'])

wine.iloc[:, :-1].describe()

wine.iloc[1:4, :3]

wine.iloc[1:4, :-1]

wine.loc[1:3, 'alcohol':'pH']

pd.Categorical(wine['class'].astype('int')).describe()

wine['class'].astype('category').describe()

wine.loc[:, 'alcohol':'pH'].describe()

wine.iloc[:, :-1].to_numpy()

wine['class'].to_numpy()

data = wine.iloc[:, :-1].to_numpy()
target = wine['class'].to_numpy()
train_input, test_input, train_target, test_target \
  = train_test_split(data, target, test_size=0.2, random_state=42)

train_input.shape, train_target.shape

test_input.shape, test_target.shape

from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier(random_state=42)
dt.fit(train_input, train_target)

print(accuracy_score(train_target, dt.predict(train_input)))
print(accuracy_score(test_target, dt.predict(test_input)))

from sklearn.tree import plot_tree

plot_tree(dt)
plt.show()

fnames = wine.iloc[:, :-1].columns.to_list()
fnames

plot_tree(dt, max_depth=1, filled=True, feature_names=fnames)
plt.show()

data.shape, train_input.shape, test_input.shape

np.unique(train_target, return_counts=True)

dt = DecisionTreeClassifier(max_depth=3, random_state=42)
dt.fit(train_input, train_target)
print(accuracy_score(train_target, dt.predict(train_input)))
print(accuracy_score(test_target, dt.predict(test_input)))

plot_tree(dt, filled=True)
plt.show()

dt.feature_importances_

fnames = wine.loc[:, 'alcohol':'pH'].columns.to_numpy()
fnames

np.argsort(dt.feature_importances_)

desc_idx = np.argsort(dt.feature_importances_)[::-1]
desc_idx

fnames[desc_idx]

top2 = fnames[desc_idx][:2]
top2

dt = DecisionTreeClassifier(min_impurity_decrease=0.0005, random_state=42)
dt.fit(train_input, train_target)
print(accuracy_score(train_target, dt.predict(train_input)))
print(accuracy_score(test_target, dt.predict(test_input)))
plot_tree(dt, filled=True, feature_names=fnames)
plt.savefig("dt_01.png", dpi=600)
plt.show()

