# -*- coding: utf-8 -*-
"""01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AYToltAFO4kW4eUn_K9bnVM526A6Ac-_
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py
# %matplotlib inline

fish_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0, 9.8, 
                10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
fish_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0, 6.7, 
                7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

fish_data = np.column_stack((fish_length, fish_weight))
fish_data.shape

np.ones((3, 4), dtype='int')
np.ones(3) # == np.ones((3,))

fish_target = np.concatenate((np.ones(35), np.zeros(14)))
fish_target.shape

np.unique(fish_target, return_counts=True) # 배열 구성 및 빈도수 확인 가능

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = train_test_split(fish_data, fish_target, test_size=0.25, random_state=42, stratify=fish_target)

train_input.shape, train_target.shape

test_input.shape, test_target.shape

np.unique(train_target, return_counts=True)

13/49, 36/49, 10/36, 26/36

np.unique(test_target, return_counts=True)

4/13, 9/13

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

kn = KNeighborsClassifier()
kn.fit(train_input, train_target)
print(kn.score(test_input, test_target))
y_pred = kn.predict(test_input)
print(accuracy_score(test_target, y_pred))

kn.predict([[25, 150]])

dist, idx = kn.kneighbors([[25, 150]])

dist

idx  # 2차원 구조

# fancy indexing
# 인덱스 배열을 전달하여 인덱스에 해당하는 값을 가져옴
train_target[idx[0]]

plt.scatter(train_input[:, 0], train_input[:, 1])
plt.scatter(25, 150, marker='^')
plt.scatter(train_input[idx[0], 0], train_input[idx[0], 1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()

plt.scatter(train_input[:, 0], train_input[:, 1])
plt.scatter(25, 150, marker='^')
plt.scatter(train_input[idx[0], 0], train_input[idx[0], 1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.xlim((0, 1000))
plt.show()

train_mean = np.mean(train_input, axis=0)  # 각 feature마다 mean, std 적용해야하므로 axis=0 넣어줌
train_std = np.std(train_input, axis=0)
train_mean, train_std

train_scaled = (train_input - train_mean) / train_std
train_scaled

kn.fit(train_scaled, train_target)

test_scaled = (test_input - train_mean) / train_std
test_scaled

accuracy_score(test_target, kn.predict(test_scaled))

new_data = ([[25, 100]] - train_mean) / train_std
new_data

dist, idx = kn.kneighbors(new_data)
dist, idx, kn.predict(new_data)

plt.scatter(train_scaled[:, 0], train_scaled[:, 1])
plt.scatter(new_data[0, 0], new_data[0, 1], marker='^')
plt.scatter(train_scaled[idx[0], 0], train_scaled[idx[0], 1], marker='D')
plt.xlabel('length')
plt.ylabel('weight')
plt.show()