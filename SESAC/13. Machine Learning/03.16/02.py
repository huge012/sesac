# -*- coding: utf-8 -*-
"""02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B18Zd62E8mC3TWg-LLzMi2PjnaLaa9_Z
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""## 데이터 준비하기"""

# 도미 데이터
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]

# 빙어 데이터
smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]

# 생선 데이터
length = bream_length + smelt_length
weight = bream_weight + smelt_weight

# 리스트 내포
fish_data = [ (l, w) for l, w in zip(length, weight) ]

fish_target = [1]*len(bream_length) + [0]*len(smelt_length)

train_input = fish_data[0:35:1] # 0~35까지 1씩 증가
train_target = fish_target[:35:1]
test_input = fish_data[35:]
test_target = fish_target[35:]

"""## 훈련하기"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

kn = KNeighborsClassifier()
kn.fit(train_input, train_target)

"""## 평가하기"""

#kn.score(test_input, test_target)
accuracy_score(test_target, kn.predict(test_input))

"""## numpy 연습"""

np.random.seed(42) # seed 고정
X = np.random.randint(1, 100, 15).reshape(-1, 5) # 1~99 사이의 숫자 15개, 5열씩 끝까지 구분
X

X.shape

X.sum() # axis default : 전부 더한 값

X.sum(axis=0) # axis=0: 행, 하나의 레코드에 대해 함수 적용하기

X.sum(axis=1) # axis=1: 열, 특성에 대해 함수 적용하기

"""## 샘플링 편향 해결하기"""

np.random.seed(42)
index = np.arange(49)
index

np.random.shuffle(index)
index

input_arr = np.array(fish_data)
target_arr =np.array(fish_target)

train_input = input_arr[index[:35]]
train_target = target_arr[index[:35]]
test_input = input_arr[index[35:]]
test_target = target_arr[index[35:]]

train_input.shape, train_target.shape

test_input.shape, test_target.shape

plt.scatter(train_input[:, 0], train_input[:, 1])
plt.scatter(test_input[:, 0], test_input[:, 1])
plt.xlabel("length")
plt.ylabel("weight")
plt.legend(['train', 'test'])
plt.show()

kn.fit(train_input, train_target)
kn.score(test_input, test_target)

accuracy_score(test_target, kn.predict(test_input))

"""## Quartile Range"""

np.random.seed(42)
arr = np.random.randint(1, 101, 100)
arr

Q = np.percentile(arr, [25, 50, 75])
Q

q1, q2, q3 = Q[0], Q[1], Q[2]

IQR = q3 - q1

lfence = q1 - 1.5*IQR
ufence = q3 + 1.5*IQR
lfence, ufence

arr[30] = 200 # 임의의 outliers 만들어줌

(arr < lfence) | (arr > ufence)  # indexing 역할

outliers = arr[(arr < lfence) | (arr > ufence)]
outliers

normal = arr[(arr >= lfence) & (arr <= ufence)]
normal