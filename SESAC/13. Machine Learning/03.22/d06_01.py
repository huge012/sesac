# -*- coding: utf-8 -*-
"""d06_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r7HmVPCXerOzy10-QJxXak_qgmMSrn-n
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

df = pd.read_csv('https://bit.ly/perch_csv_data')
df.head()

perch_full = df.to_numpy()
perch_full[:5]

perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

perch_full.shape, perch_weight.shape

train_input, test_input, train_target, test_target = train_test_split(perch_full, perch_weight, random_state=42)

train_input.shape, train_target.shape

test_input.shape, test_target.shape

poly = PolynomialFeatures(degree=2, include_bias=False)
train_poly = poly.fit_transform(train_input)
train_poly.shape

poly.get_feature_names_out()

df.info()

test_poly = poly.transform(test_input)

test_poly.shape

lr = LinearRegression()
lr.fit(train_poly, train_target)

r2_score(train_target, lr.predict(train_poly))

r2_score(test_target, lr.predict(test_poly))

for n in range(1, 6):
  poly = PolynomialFeatures(degree=n, include_bias=False)
  train_poly = poly.fit_transform(train_input)
  test_poly = poly.transform(test_input)
  lr = LinearRegression()
  lr.fit(train_poly, train_target)
  print(f"degree:{n}, feature #: {train_poly.shape[1]}")
  print(f"train score: {r2_score(train_target, lr.predict(train_poly))}")
  print(f"test score: {r2_score(test_target, lr.predict(test_poly))}", end='\n\n')

poly = PolynomialFeatures(degree=3, include_bias=True)
train_poly = poly.fit_transform(train_input)
poly.get_feature_names_out()

train_poly.shape, test_poly.shape

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()
ss.fit(train_poly)
train_scaled = ss.transform(train_poly)
test_scaled = ss.transform(test_poly)

ss.mean_

ss.scale_

lr = LinearRegression()
lr.fit(train_scaled, train_target)

r2_score(train_target, lr.predict(train_scaled))

r2_score(test_target, lr.predict(test_scaled))

from sklearn.linear_model import Ridge

ridge = Ridge()
ridge.fit(train_scaled, train_target)

r2_score(train_target, ridge.predict(train_scaled))

r2_score(test_target, ridge.predict(test_scaled))

lr.coef_

ridge.coef_

for n in [0.001, 0.01, 0.1, 1, 10, 100, 1000]:
  ridge = Ridge(alpha=n)
  ridge.fit(train_scaled, train_target)
  print(f"alpha:{n}")
  print(f"train score: {r2_score(train_target, ridge.predict(train_scaled))}")
  print(f"test score: {r2_score(test_target, ridge.predict(test_scaled))}", end='\n\n')

train_score, test_score = [], []
alphas = [0.001, 0.01, 0.1, 1, 10, 100, 1000]
for n in alphas:
  ridge = Ridge(alpha=n)
  ridge.fit(train_scaled, train_target)
  train_score.append(r2_score(train_target, ridge.predict(train_scaled)))
  test_score.append(r2_score(test_target, ridge.predict(test_scaled)))

plt.plot(np.log10(alphas), train_score)
plt.plot(np.log10(alphas), test_score)
plt.xlabel('log10(alpha)')
plt.ylabel('score')
plt.show()

from sklearn.linear_model import Lasso

lasso = Lasso()
lasso.fit(train_scaled, train_target)

r2_score(train_target, lasso.predict(train_scaled))

r2_score(test_target, lasso.predict(test_scaled))

import warnings

warnings.filterwarnings(action='ignore')

alphas = [0.001, 0.01, 0.1, 10, 100]
for n in alphas:
  lasso = Lasso(alpha=n)
  lasso.fit(train_scaled, train_target)
  print(f"alpha:{n}")
  print(f"train score: {r2_score(train_target, lasso.predict(train_scaled))}")
  print(f"test score: {r2_score(test_target, lasso.predict(test_scaled))}", end='\n\n')

lasso.alpha

lasso.coef_

train_score, test_score = [], []
alphas = [0.001, 0.01, 0.1, 1, 10, 100]
for n in alphas:
  lasso = Lasso(alpha=n)
  lasso.fit(train_scaled, train_target)
  train_score.append(r2_score(train_target, lasso.predict(train_scaled)))
  test_score.append(r2_score(test_target, lasso.predict(test_scaled)))

plt.plot(np.log10(alphas), train_score)
plt.plot(np.log10(alphas), test_score)
plt.xlabel('log10(alpha)')
plt.ylabel('score')
plt.show()

np.sum(lasso.coef_ == 0)

poly.get_feature_names_out()

lasso.coef_ != 0

poly.get_feature_names_out()[lasso.coef_ != 0]

