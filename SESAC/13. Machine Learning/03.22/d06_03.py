# -*- coding: utf-8 -*-
"""d06_03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qNMJr92x-OZqifWscKRnnm-tueJTSdmO
"""

# Commented out IPython magic to ensure Python compatibility.
# %run my_init.py

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

z = np.arange(-5, 5, 0.1)
phi = 1 / (1 + np.exp(-z))
plt.plot(z, phi)
plt.xlabel('z')
plt.ylabel('phi')
plt.show()

fish = pd.read_csv('https://bit.ly/fish_csv_data')
fish.head()

fish_target = fish['Species'].to_numpy()
fish_target

fish_input = fish.drop('Species', axis=1).to_numpy()
fish_input[:5]

train_input, test_input, train_target, test_target = train_test_split(fish_input, fish_target, random_state=42)

ss = StandardScaler()
train_scaled = ss.fit_transform(train_input)
test_scaled = ss.transform(test_input)

(train_target == 'Bream') | (train_target == 'Smelt')

train_bream_smelt = train_scaled[(train_target == 'Bream') | (train_target == 'Smelt')]
target_bream_smelt = train_target[(train_target == 'Bream') | (train_target == 'Smelt')]

lr = LogisticRegression()
lr.fit(train_bream_smelt, target_bream_smelt)

lr.predict(train_bream_smelt[:5])

lr.predict_proba(train_bream_smelt[:5])

lr.classes_

np.unique(target_bream_smelt)

target_bream_smelt_1_0 = np.where(target_bream_smelt == 'Bream', 1, 0)

target_bream_smelt[:5]

target_bream_smelt_1_0[:5]

lr = LogisticRegression()
lr.fit(train_bream_smelt, target_bream_smelt_1_0)

lr.predict(train_bream_smelt[:5])

lr.predict_proba(train_bream_smelt[:5])

lr.coef_, lr.intercept_

lr.decision_function(train_bream_smelt[:5])

from scipy.special import expit

expit(lr.decision_function(train_bream_smelt[:5]))

"""### 다중 분류"""

from sklearn.metrics import accuracy_score

ir = [0.1 , 0.5, 1, 10, 100, 1000, 10000, 100000, 1000000]
for n in ir:
  lr = LogisticRegression(C=n)
  lr.fit(train_scaled, train_target)
  print(f"C: {n}")
  print(f"train score: {accuracy_score(train_target, lr.predict(train_scaled))}")
  print(f"test score: {accuracy_score(test_target, lr.predict(test_scaled))}", end="\n\n")

lr = LogisticRegression(C=10000)
lr.fit(train_scaled, train_target)

lr.predict(test_scaled[:5])

lr.classes_

np.round(lr.predict_proba(test_scaled[:5]), decimals=3)

from scipy.special import softmax

np.round(softmax(lr.decision_function(test_scaled[:5]), axis=1), decimals=3)

