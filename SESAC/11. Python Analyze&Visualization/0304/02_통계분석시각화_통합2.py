# -*- coding: utf-8 -*-
"""01. 통계분석시각화 - 통합2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g7jCo7YP8XK-zRafoL_ZtU1jrxZQsrdg

교재 330p
"""

import pandas as pd
path = '/content/drive/MyDrive/seSac/python/train_titanic.csv'
df = pd.read_csv(path)
df

import matplotlib.pyplot as plt
s1 = pd.Series([1,2,3,4,5,6,10])
s1.plot()
plt.show()

df.Age.plot()
plt.title("Age")
plt.show()

# index에 날짜 부여
s2 = pd.Series([1, 2, 3, 4, 5, 6, 7, 10], index=pd.date_range('2019-01-01', periods=8))
s2

s2.plot()
plt.show() # x축 인덱스를 tick으로 사용

s2.plot(grid=True)
plt.show()

df_rain = pd.read_csv('/content/drive/MyDrive/seSac/python/sea_rain.csv')
df_rain

df_rain2 = df_rain[['동해','남해','서해','전체']]
df_rain2.index = ["1996", "1997", "1998", "1999", "2000"]
df_rain2

plt.rc('font', family='NanumBarunGothic')
df_rain2.plot()
plt.show()

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

rplot = df_rain2.plot(grid=True, style=['r-*', 'g-o', 'b:*', 'm-.p'])
rplot.set_xlabel('연도')  # plot에 대한 설정은 변수에 담아서 하기
rplot.set_ylabel('강수량')
rplot.set_title("연간 강수량")
plt.show()

df_rain2.plot(grid=True, style=['r-*', 'g-o', 'b:*', 'm-.p'])
plt.xlabel('연도')  # plt로 접근할 수 있음
plt.ylabel('강수량')
plt.title("연간 강수량")
plt.show()

year = [2006,2008,2010,2012,2014,2016]  # 연도
area = [26.2,27.8,28.5,31.7,33.5,33.2]  # 1인당 주거 면적
table = {"연도":year, '주거면적':area}
df_area = pd.DataFrame(table, columns=["연도", "주거면적"])
df_area
df_area.plot(x="연도", y="주거면적",grid=True, style=['r-*', 'g-o'])
plt.show()

df.plot(x="PassengerId", y="Age", grid=True, title="승객나이")
plt.xlabel("승객 ID")
plt.ylabel("나이")
plt.show()

"""# 산점도"""

temperature = [25.2, 27.4, 22.9, 26.2, 29.5, 33.1, 30.4, 36.1, 34.3, 29.1]
sales = [236500, 357500, 203500, 365200, 446600, 574200, 453200, 675400, 598400, 463100]
dict_data = {"기온": temperature, "판매량":sales}
df_sales = pd.DataFrame(dict_data, columns=["기온", "판매량"])

df_sales.plot.scatter(x='기온', y='판매량', grid=True, title="온도와 판매량")
plt.show()

"""# 막대그래프"""

grade_num = [5, 4, 12, 3]
students = ["A", "B", "C", "D"]
df_grade = pd.DataFrame(grade_num, index=students, columns=['Student'])

df_grade.plot.bar(grid=True)
plt.xlabel('학점')
plt.ylabel('학생 수')
plt.title("학점 별 학생 수 그래프")
plt.show()

"""# 히스토그램"""

math=[90, 85, 80, 75, 70, 77, 80, 85, 87, 90, 95, 65, 70, 77, 75]
df_math = pd.DataFrame(math, columns=['Student'])
#df_math.plot(kind="hist")
df_math.plot.hist(bins=8) # 최소 최대를 균등하게 나눠줌
plt.xlabel('시험 성적')
plt.ylabel('도수')
plt.title("수학 시험의 히스토그램")
plt.show()

adf = df[['Age']] # DataFrame : 특정 컬럼을 추출한 데이터프레임
adf.plot.hist(bins=[age for age in range(0, 86, 5)])
plt.show()
adf = df['Age'] # Series : Age 컬럼으로 시리즈 객체를 생성
adf.plot.hist(bins=[age for age in range(0, 86, 5)])
plt.show()

"""#파이그래프"""

fruit = ['사과', '바나나', '딸기', '오렌지', '포도']
result = [7, 6, 3, 2, 2]
df_fruit = pd.Series(result, index=fruit, name="선택한 학생 수")
df_fruit

df_fruit.plot.pie()
plt.show()