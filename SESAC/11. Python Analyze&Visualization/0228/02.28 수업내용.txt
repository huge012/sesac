0228 수업내용

## pandas

[https://pandas.pydata.org/docs/index.html](https://pandas.pydata.org/docs/index.html)

## Series

numpy 데이터 프레임은 matrix로 구성

각 행렬의 한 줄을 편하게 읽기 위해 Series 사용

실제로 많이 사용되는 자료구조는 아님

**사용법**

```python
import pandas as pd

s = pd.Series([1, 2, 3, 4, 5])
print(s)
print(s.index) # 인덱스 정보
print(s.values) # 값 정보

# 문자열도 가능
s = pd.Series(["홍길동", "강감찬", "을지문덕"])
print(s)
print(s.index)
print(s.values)

# 인덱스 지정 가능
subjects = ['국어', '영어', '수학']
# 원하는 인덱스 주고싶을 때, 시퀀스 값을 묶어서 넘겨주고 지정된 인덱스 값을 키워드로 넘겨주기
s = pd.Series([90, 85, 39], index=subjects)
print(s)
```

**빈 데이터 표현법**

결측치를 무엇으로 표현할 것인가?

np.nan : 가장 많이 사용됨

None

0

기타 값

```python
import numpy as np

# 데이터 없을 때의 표현법
s1 = pd.Series([np.nan, 10, 30])
s2 = pd.Series([None, 10, 30])
s3 = pd.Series([0, 10, 30])
s4 = pd.Series([-1, 10, 30])

print(s1)  # Nan으로 들어감
print('----------------')
print(s2)  # Nan으로 들어감
print('----------------')
print(s3)  # 0으로 들어감
print('----------------')
print(s4)  # -1로 들어감
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a0c18dca-9dc2-401a-8ca2-007580b8510b/Untitled.png)

np.nan과 None의 차이

```python
print(np.nan == np.nan)  # nan끼리는 같지 않음, 비교 자체가 안 됨
print(None == None)  # None과 None은 같다고 취급
print(np.nan is np.nan)  # 둘 다 참조가 없으므로 True
print(None is None)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d77d7c83-3255-4bcc-be77-e106ef9d1fc0/Untitled.png)

※**==, is의 차이**

<aside>
❗ == : 값을 비교

is : 참조를 비교

</aside>

```python
a = [1, 2, 3]
b = [1, 2, 3]
c = a
print(a == b)  # 값을 비교
print(a is b)  # 참조를 비교
print(a == c)  # 값을 비교
print(a is c)  # 참조를 비교
print(b == c)  # 값을 비교
print(b is c)  # 참조를 비교
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/adcb1366-a643-4f7c-95f2-a750f4aed535/Untitled.png)

## 날짜 시퀀스

```python
# 일정 기간을 담고 있는 날짜 시퀀스 생성
# 날짜 표기 방식 다양하게 사용 가능
s = pd.date_range(start='2019-01-01', end='2022-02-28')
s = pd.date_range(start='2019/01/01', end='2022.02.28')
print(s)

# 특정 주기별로 시퀀스 생성 가능
s = pd.date_range(start='2019/01/01', end='2022.02.28', freq='2D') # 2일 주기
s = pd.date_range(start='2019/01/01', end='2022.02.28', freq='2B') # 2달 주기
s = pd.date_range(start='2019/01/01', end='2022.02.28', freq='2W') # 2주 주기
```

## DataFrame

df = pd.DataFrame(data)

data는 maxrix 형태

```python
df = pd.DataFrame([["홍길동", 90, 80, 70], ["강감찬", 80, 78, 90]])
print(df)

print(df.index)  # 인덱스, 0부터 2까지 순차적으로 증가 (0, 1)
print(df.columns)  # 컬럼, 0부터 4까지 순차적으로 증가 (0, 1, 2, 3)
print(df.values)  # 가지고 있는 값

# 인덱스명, 컬럼명 지정하기
nums = [1, 2]
cnames = ["이름", "국어", "수학", "영어"]
df = pd.DataFrame([["홍길동", 90, 80, 70], ["강감찬", 80, 78, 90]], index = nums, columns = cnames)
print(df)

# 테이블 데이터 입력 가능, 컬럼명 자동 지정됨
table_data = {"연도":[np.nan, 2020, 2021],
              "매출":[100, None, 120]}
df = pd.DataFrame(table_data)
print(df)

print(df.info())

print(df.describe())  # 정보 분석
```

## Series 데이터 연산

```python
s1 = pd.Series([1, 2, 3, 4, 5])
s2 = pd.Series([7, 8, 9, 10, 11])
s3 = s1 + s2 # 같은 줄 같은 열의 값을 더해줌
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d1ef7d09-b960-47ae-b56c-d8b205128b32/Untitled.png)

**인덱스 맞지 않을 경우**

```python
s1 = pd.Series([1, 2, 3, 4, 5])
s2 = pd.Series([7, 8, 9, 10])
s3 = s1 + s2  # 인덱스가 안 맞을 경우 결과값엔 NaN 들어감
print(s1)
print(s2)
print(s3)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/51caedc1-99a0-4022-82cf-c8e89db22805/Untitled.png)

**연산 더 보기**

```python
s1 = pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])
s2 = pd.Series([2, 3, 7, 8], index=['a', 'c', 'd', 'e'])
s3 = s1 + s2  # 인덱스 이름이 같은 것 끼리 연산
print(s3)
```

## DataFrame 데이터 연산

```python
# 데이터 만들기
data1 = {"홍길동": [90, 85, 70],
        "강감찬": [90, 80, 65],
        "이순신": [100, 100, 100]}
df1 = pd.DataFrame(data1)

data2 = {"홍길동": [100, 75, 80],
        "강감찬": [90, 85, 75],
        "을지문덕": [95, 100, 95]}
df2 = pd.DataFrame(data2)

# 연산
df3 = df1 + df2

print(df1)
print(df2)
print(df3)

# 분석
df3.describe()

# 분산
print(df3.mean())
print('-------------------')
print(df3.mean(axis=1))

# 평균
df3.var()

# 조회
df3.head(2) # 위에서부터 n개, default = 5
df3.tail(2) # 아래에서부터 n개, default = 5
df[50:55]  # 범위 지정 (해당되는 row 데이터 뽑음)
df.loc[50]  # 특정 row 뽑음, 범위 지정도 가능 df.loc[50:55]
```

pandas와 loc

```python
# 판다스 : x축 먼저 접근한 후 y축 접근
print(df['petal.length'][0])
#print(df[0]['petal.length'])

# loc : y축 먼저 접근한 후 x축 접근
print(df.loc[0]['petal.length'])
print(df.loc[0, 'petal.length'])
```

**전치행렬**

```python
df.T  # 전치행렬
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2dc32e6a-2fa9-428e-ac5f-ea0582f42d48/Untitled.png)

### 데이터 통합하기

**append : 행 추가하기**

```python
# 데이터 만들기
data = {"국어":[100, 38, 45, 90],
       "영어":[90, 80, 75, 80]}
df = pd.DataFrame(data)

data2 = {"국어":[75, 80],
       "영어":[65, 70]}
df2 = pd.DataFrame(data2)

# 데이터 통합
rdf = df.append(df2) # df에 df2를 합친 새로운 데이터프레임을 반환한다. 원본은 바뀌지 않는다.
print(rdf)

rdf = df.append(df2, ignore_index = True)  # 합치는 데이터프레임들의 인덱스를 무시한다
print(rdf)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e90c089f-c8b3-42ce-97f9-914fdb3df6e6/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6f136d70-2f0b-4774-91b7-3a8c4a20a009/Untitled.png)

결측치

```python
data3 = {"국어":[75, 80]}
df3 = pd.DataFrame(data3)

rdf = df.append(df3)
print(rdf)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f49e0aa7-dd6f-4bf1-abe9-36e5f2761c88/Untitled.png)

**join : 열 추가하기**

```python
data4 = {"수학":[90, 85, np.nan, 88]}
df4 = pd.DataFrame(data4)

rdf = df.join(df4)
print(rdf)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ecf85c6f-6917-4c02-a515-edd2db42441f/Untitled.png)

## 결측치 표현

np.nan과 None

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/768ab739-5596-4735-9429-70e4fad876fe/Untitled.png)

결측치 확인

```python
se1 = pd.Series(['홍길동', '강감찬', np.nan, '을지문덕'])
se1.isnull()  # 결측치 여부 확인, 반대 : se1.notnull()
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cc14f341-246c-49b5-b213-b0d028365e97/Untitled.png)

결측치 대입하기

```python
se1[0] = np.nan
print(se1)

se1[1] = None
print(se1)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/aeb934f2-f34b-4ed5-a84f-a7ecf88b3162/Untitled.png)

전처리 과정에서 결측 데이터 제외하기

- 전처리 : 데이터의 결측치 및 이상치를 확인하거나 제거하고 불일치되는 부분을 일관성 있는 데이터의 형태로 전환하기도 하는 모든 과정

**유효한 열 뽑아내기**

```python
se2 = se1.dropna()
print(se2)

se3 = se1[se1.notnull()]
print(se3)
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1e0e133f-c07f-4a49-92a3-d3ccd50c8267/Untitled.png)

하나라도 결측치가 있다면 걸러주어야 함(경우에 따라 다름)

```python
df1 = pd.DataFrame([[1, np.nan, 3, 4], [np.nan, np.nan, np.nan, np.nan], [3, 4, 1, 1]])

#하나라도 결측치일 때, 해당 Row(index)를 삭제
df2 = df1.dropna()
print(df2)

# 모든 컬럼이 결측치일 때 해당 Row(index)를 삭제하시오.
df3 = df1.dropna(how = 'all')
print(df3)
```

**유효한 행 뽑아내기**

```python
df1.iloc[1][0] = 2
df4 = df1.dropna(axis = 1)  # 결측치 없는 행을 추출
print(df1)
print(df4)
```

**결측치 다른 값으로 치환**

```python
df5 = df1.fillna(0) # 결측치를 원하는 값으로 변동
print(df5)
```

**텍스트 파일 인코딩**

> 파이썬에서 텍스트 파일 생성 시 기본 문자 인코딩 형식은 utf-8이다. 하지만 윈도우 메모장에서 파일을 저장하면 인코딩 형식이 cp949가 된다. pandas의 read_csv()로 csv 파일을 읽어 올 때 텍스트 파일의 인코딩 형식에 따라 옵션을 지정해야 한다.  utf-8 형식일 경우 encoding = “utf-8”, cp949 형식의 경우 encoding = “cp949”를 추가해서 읽어오면 된다.
> 

## Pandas 입출력

df = pd.read_csv(경로)

```python
# csv 파일 읽어오기
import pandas as pd
df = pd.read_csv('/content/sample_data/sea_rain1.csv')

# txt 파일 읽어오기 (구분자 설정 가능)
df2 = pd.read_csv('/content/sample_data/sea_rain1.txt', sep='-')

# 파일 쓰기 (새로 생성)
df.to_csv('demo.csv')

# 헤더 없는 경우 설정
df3 = pd.read_csv('/content/sample_data/demo2.csv', header=None)

# 원하는 헤더 부여하기
df3.columns = ["연도", "동해", "남해", "서해", "전체"]
```

## 실습 예제

타이타닉 데이터

[train_titanic.csv](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/211e6e69-c532-4e24-a989-8aefd534d803/train_titanic.csv)

```python
# 파일 불러오기
import pandas as pd
path = '/content/sample_data/train_titanic.csv'
data = pd.read_csv(path)

# 데이터 확인
data.info()

# 분포 세기
data['Survived'].value_counts()
data['Pclass'].value_counts()

# 전처리 - 호칭 구분
names_values = ['None', 'Mr', 'Mrs', 'Miss', 'Master', 'Dr']
ndata = data['Name']

# 각 이름마다 체크
for ne in ndata:
  # ','를 기준으로 분리
  f, s = ne.split(',')

  # ',' 뒤에 있는 문자열을 '.'으로 분리
  ses = s.split('.')

  # '.'의 앞부분에 공백 제거
  s0 = ses[0].replace(' ', '')

  # names_values에 있는지 체크
  check = False
  for i, ne2 in enumerate(names_values):
    # 호칭 있을 경우 출력
    if ne2 == s0:
      print(i)
      check = True
      break

  # 호칭 없을 경우
  if check == False:
    print(0)

# 전처리 - 성별을 숫자로 바꾸기
sdata = data['Sex']
for j, sd in enumerate(sdata):
  if sd == 'female':
    sdata[j] = 0
  else:
    sdata[j] = 1

print(data)
```

범주형 데이터 → 수치형 데이터