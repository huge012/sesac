02.07 수업내용

* spring, spring boot
- jsp 서블릿 기반

* 수업환경
- eclipse 2021-03
- jdk 1.8
- oracle 18c
- tomcat 9.0

* spring tools

* framework
- 어플리케이션의 공통점을 찾아 하부구조를 제공
- frameWork는 반제품(틀, 구조, 코드가 상당부분 제공됨)
- 소프트웨어의 구체적인 부분에 해당하는 설계와 구현을 재사용 가능하게끔 일련의 협업화된 형태로 클래스를 제공

* Spring frameWork
- java 플랫폼을 위한 오픈소스 어플리케이션 프레임워크
- 오픈소스 경량급 엔터프라이즈 어플리케이션 프레임워크
- pojo(plain old java object) 방식의 프레임워크
- 대한민국 전자정부 표준 프레임워크 기반 기술
- AOP(관점지향 프로그래밍)
- 제어 반전 (IoC)
- 의존성 주입 (DI) : 이미 있는 것에 추가함

* 스프링 기능
core, context, dao, orm, aop, web, webMVC 모듈 등등

* Spring 특징
- 경량 : 크기와 부하 측면에서 경량, 몇 개의 JAR 파일로 구성되어 설치와 사용이 쉬움
- 제어역행(IoC) : 객체의 생성에서 소멸까지를 설정 파일이나 어노테이션을 통해 컨테이너가 관리, DI를 통해 모듈간의 의존성 주입 (작은 부품을 먼저 만들어 큰 부품 생성시 조립)
- DI(종속성 주입, 부품 조립) : B를 만들어서 A를 조립하는 식


* Maven - 프로젝트 생성, 라이브러리 설정, 컴파일, 테스트, 패키지 생성, 인스톨, 배포 도와주는 빌드도구
- Maven Project 생성
- group id : 회사 uri
- artifact id : 프로젝트 이름
- pom.xml 파일 생성됨, 해당 파일에 java 버전 수정한 뒤 프로젝트 우클릭-maven update

- folder 생성하기 : build path -> source -> add folder -> create new folder


* spring 이전
- interface : 개발코드와 객체가 서로 통신하는 접점 역할. 다형성 구현에 중요.
- Factory Pattern : 클래스의 인스턴스를 만드는 것을 서브클래스에서 결정하도록 함. new 키워드 사용(객체 생성)을 캡슐화. 객체 생성 팩토리를 만듦

* spring
- Bean : 스프링이 IoC방식으로 직접 생성과 제어를 담당하는 객체
- BeanFactory : 스프링 IoC를 담당하는 핵심 컨테이너
- ApplicationContext : BeanFactory를 확장, 스프링이 제공하는 각종 부가서비스를 추가 제공


* spring container : 객체생성, 변수 대입
- POJO (일반적인 java 객체), XML 설정파일을 이용하여 객체 생성

* BeanFactory
- 빈 사용 시 생성됨
- 메모리 효율적으로 사용할 수 있어서 모바일 관련 개발에 주로 사용
- XML 설정 파일 올림

* ApplicationContext
- 사용되기 전에 빈을 미리 로딩
- 일반 어플리케이션 개발시 사용
- 메시지의 국제화
- 리소스 관리 및 로딩
- 이벤트 처리 등 유용한 부가기능(주요자식 API)

* spring 환경설정
- STS 설치 : 이클립스 help - eclipse marketplace - sts 3 addOn 설치

- https://mvnrepository.com/search?q=spring-context
mvn repository에서 spring-context 검색 - maven 코드 복사 - pom.xml 내 dependencies 에 붙여넣기 (의존성 library를 알아서 다운받아서 Maven Dependencies에 저장함)
properties에 스프링프레임워크 버전 변수 만들어서 dependencies에 적용시키면 추후 유지보수가 편함


- spring bean definition file에 resource di2.xml 생성
<bean></bean> 태그로 객체 생성할 수 있음





-----

* IoC와 DI

객체 초기화 하는 법
* Contsructor Injection
- 의존하는 빈 객체 클래스를 초기화할 때 컨테이너로부터 생성자의 파라미터를 통해서 전달하는 방식
- spring bean에 <constructor-arg></constructor-arg> 태그로 설정
- index 순서로 설정 or name으로 변수명 지정해서 설정

* Setter 설정
- default 생성자가 필수
- spring bean에 <property></property> 태그로 설정
- name 속성에 해당되는 변수명 지정
- xml의 namespace에 p 설정하면 <bean> 태그 안에 p:변수명="값" 속성 사용할 수 있음
<bean id="p3" class="com.sac.di3.People" p:name="유지연" p:phone="1234" p:car-ref="car"/>


* 의존관계 자동설정
byName : field 이름과 bean의 id가 같으면 자동으로 들어감
byType : feild type과 bean의 type이 같으면 자동으로 들어감

* scope
- singleton : 컨테이너에 하나의 bean 생김
- prototype : 실행할 때마다 새 bean(객체) 생성

* annotation 기반 설정
- 자바 anotation으로 xml 설정을 대신할 수 있음 (자바 5 이상)
- 설정 파일 간결화
- @anotation 형태로 클래스, 필드, 메소드 선언부에 적용가능
- 소스코드에 메타데이터를 보관할 수 있음
- 코드 가독성을 높일 수 있음
- @Autowired : 필드변수 바로 위에 적는게 좋음, 설정 파일에 <context:annotation-config/> 추가
- @Component : 자동인식이 되는 일반 컴포넌트, 클래스 선언부에 설정
 ㄴ@Service : 비즈니스 서비스를 의미
 ㄴ@Repository : DAO에 적용
 ㄴ@Controller : MVC 컴포넌트에 적용

* spring 3.0
- 설정도 자바에서 할 수 있음




* oracle jdbc 디펜던시 받아오기
maven repository에서 oracle 검색, ojdbc8버전 선택, 18.3.0.0 maven 복사
<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
<dependency>
    <groupId>com.oracle.database.jdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>18.3.0.0</version>
</dependency>


<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.3.15</version>
</dependency>


* DAO : @Repository
Service : @Service


----

AOP : 관점지향 플그래밍
- 주기능과 보조기능을 분리해서 메소드에 적용
- concern : 앱 개발을 위해 관심가지고 구현해야 하는 각각의 기능들
- core concern : 해당 앱의 핵심 비즈니스 로직
- cross-cutting concern : 하나의 영역에서만 활용되는 고유 관심사항이 아닌, 여러 클래스에서 사용하는 기능들
- spring을 통해 주기능의 특정 시기에 보조업무를 넣어줌

*
target : 핵심 로직 구형하는 클래스 공통 관심사항을 적용받는 대상
aspect : pointcut과 advise 합침
pointcut : 어느 지점에 기능을 사용할것인지 결정하는 선택기능
advise : 동작시점(주업무 전, 주업무 후, 에러사항, 전반적)에 수행될 코드 (before, after returning, after throwing, after, around)
ㄴ xml, annotation 두가지로 표현가능
joinpoint : 공통관심의 기능이 삽입되어 실행될 수 있는 특정 위치
advisor : adivice + pointcut
weaving : 공통관심사항의 코드인 advice를 핵심 관심사항의 로직에 적용


* 특정 지점(joinpoint)에 들어가는 타이밍 (pointcut 지정하는 방식)
1) execution(*print(..)) : 함수 이름이 print인 건 전부 선택
execution(* *(..)) : 반환타입, 파라미터 종류, 개수 상관없이 모든 메소드 선택
2) within(패키지명...*) : 해당 패키지 안에 있는 모든 메소드


* 주 업무 만든 뒤 보조업무 만들기
* pom.xml에 aop 관련 디펜던시 추가
aspectj weaver 1.9.6
AspectJ Tools (Compiler) 1.9.6
Aspectjrt 1.5.4

* 보조업무
implement MethodInterceptor (import org.aopalliance.intercept.MethodInterceptor;)


xml 표현 : com.sac.zz.aop
annotation 표현 : com.sac.zz.aop2