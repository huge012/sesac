02/15 수업내용

- client(brower) - WAS (Tomcat9) - DB서버 (Oracle 18)
request -> FrontController(DispatcerServlet) -> controllers -> DAO
response <-



* Spring Boot 환경설정
깃 : https://github.com/spring-projects/sts4/wiki/Previous-Versions
스프링부트 툴 : https://download.springsource.com/release/STS4/4.8.1.RELEASE/dist/e4.17/spring-tool-suite-4-4.8.1.RELEASE-e4.17.0-win32.win32.x86_64.zip


* Spring
- java 플랫폼을 위한 오픈소스 어플리케이션 프레임워크
- 오픈소스 경량급 엔터프라이즈 어플리케이션 프레임워크
- pojo(plain old java object) 방식의 프레임워크
- 대한민국 전자정부 표준 프레임워크 기반 기술
- AOP(관점지향 프로그래밍)
- 제어 반전 (IoC)
- 의존성 주입 (DI) : 이미 있는 것에 추가함
- 이클립스 설치 -> STS 설치

* SpringBoot
- spring + test/servet 환경 - 복잡한 설정
- 내장 톰캣 (기본 포트 8080, 설정 가능)
- 자동 생성되는 application.properties 파일에 각종 설정 추가
- spring Framework가 전자정부 프레임워크로 채택, 웹 개발자의 필수과목 -> 파이썬의 Django, Flask와 유사하게 생산성 높이기 위하여 개발됨
- @SpringBootApplication으로 설정된 class의 main함수로 프로그램이 시작됨
- SpringBoot는  jsp 사용 안되게 설정되어있음..
- STS 파일 받아서 바로 설치
- Create new Spring Starter Project -> 이름 설정 -> 관리 툴 Maven, Java Version 1.8, 패킹 Jar, 패키지 group+artifact
  ㄴ springboot 버전 2.4.5, 디펜던시 선택 (SpringBootDevTools-자동 재시작, Lombok-어노테이션 이용하여 객체 생성, Web/Spring Web, Template Engines(thymeleaf를 제일 많이 사용함, jsp 사용하려면 미선택)

* devtools : 파일 변경시 자동 재시작
Lombok : 어노테이션으로 getter, setter, constructor 자동생성

webMVC : spring mvc 형태 사용

src
ㄴmain
  ㄴjava
  ㄴresources
    ㄴstatic (정적인 요소)
  ㄴwebapp(직접 생성해야 함)
    ㄴWEB-INF
      ㄴviews

* JSP 사용을 위해 pom.xml에 아래 설정해야 함
<!-- JSP 템플릿 엔진 -->
<dependency>
<groupId>org.apache.tomcat.embed</groupId>
<artifactId>tomcat-embed-jasper</artifactId>
</dependency>

<dependency>
<groupId>javax.servlet</groupId>
<artifactId>jstl</artifactId>
</dependency>


* Lombok 라이브러리
- 디펜던시 추가 (프로젝트 생성 시 추가했으면 x)
- cmd, 혹은 window에서 lombok.jar도 추가해야 함
- 다운 링크 : https://projectlombok.org/download
- 파일 더블클릭해서 STS 있는 위치에 설치
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Builder
@Data
@RequiredArgsConstructor (@NonNull인 파라미터만 받는 생성자)

* SpringBootApplication

@ResponseBody : 반환값을 forward가 아닌 문자열 그대로 반환
@RestControler : 사용자 요청을 문자열이나 자바 객체를 JSON으로 반환 - 주소창에 값만 보내는 방식(어떤 변수인지는 알 수 없음)



* ORM Object Relation Mapping(객체와 DB 테이블 매핑)
- 자바 객체와 SQL문을 분리할 수 있음
- 트랜잭션 처리, 기타 DB 관련 작업이 간단
- SQL문을 직접 사용하지 않고 직관적인 메소드 사용
- EX) select * from emp; 대신 repo.findAll()

* JPA
- java persistence API
- ORM을 사용하기 위한 자바 API 규격(interface)
- Hibernate, EcipseLink, DataNucleus 등이 JPA를 구현
- 앱과 JDBC 사이에서 동작
- 개발자가 JPA 사용 -> JPA 내부에서 JDBC API를 사용하여 SQL 호출, DB와 통신 (JDBC API를 직접 사용하지 않음)

* JPA 조회 과정
- DAO -> 테이블의 JPA로 pk 넘김
- JPA가 ENTITY의 매핑정보를 바탕으로 SQL문 생성
- JPA가 JDBC API 사용하여 SQL문을 DB로 보냄
- JPA는 DB에서 전달된 ResultSet을 객체에 매핑
- JPA가 SQL문을 만들기때문에 Object와 DB간의 값이 일치하게 됨

* 장점
- 반복적 CRUD 작업을 생략
- 영속성 컨텍스트 가짐 ( persistence : DB)
- DB와 OOP의 불일치성을 해결
- OOP 관점에서 모델링 할 수 있음 (상속, 콤포지션, 연관관계)
- 재사용이 좋고 유지보수 편함

* 단점
- 어려움
- 복잡한 SQL문 사용할 땐 한계
- 잘못 사용하면 직접 SQL 사용하는것보다 성능 떨어질 수 있음

* JPA dependency 추가 (pom.xml)
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

* JPA 설정 - application.properties
- 스키마생성 (create, create-drop, update:변경 부분만 반영, validate, none)
- table을 자동생성할것인지 , 수동생성할것인지
- 큰규모의 프로젝트는 테이블을 별도로 생성하고 코드를 작성하는 것이 일반적이다.
	spring.jpa.hibernate.ddl-auto=create  // 스키마를 생성해줌, 소규모는 ddl이 자동생성되는게 좋음 (VO 만들면 테이블 자동생성)
- DDL생성시 데이터베이스 고유의 기능을 사용하는가? (오라클/mySQL의 고유 기능을 자동실행?)
	spring.jpa.generate-ddl=false
- 실행되는 SQL문을 보여줄 것인가? 
	spring.jpa.show-sql=true



* 오라클 dependency
- pom.xml 설정
<dependency>
	<groupId>com.oracle.database.jdbc</groupId>
	<artifactId>ojdbc8</artifactId>
	<scope>runtime</scope>
</dependency>

- application.properties 설정
#Dialect(방언) :  Hibernate는 DB에 맞게 SQL문을 생성하기 위해 방언을 사용한다.
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost/xe
spring.datasource.username=hr
spring.datasource.password=hr
spring.jpa.database=oracle
logging.level.org.hibernate=info
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect <- 오라클용
# spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect <- mySQL용


* entity 클래스 설계 (DB table 생성)
- sql을 이용해서 테이블을 먼저 생성하기 / JPA를 이용해서 클래스만 설계하고 자동 테이블 생성하기
- DB의 entity는 데이터로 관리되는 대상을 의미
- JPA에서 entity 관리하기 위해서는 class 생성
- entity manager는 persistence context에 여러 entity 객체를 관리
- 내부적을 db connection pool을 사용해서 db에 접근
- persistenc Context는 jpa가 entity 객체를 모아두는 공간, entity를 영구저장하는 환경이라는 의미
- jpa entity 설계는 어노테이션을 이용해서 제약조건, 연관성을 설정

@Column
- 카멜표기법을 DB에선 언더바로 변환시켜줌


* 시퀀스는 테이블과는 별개인 부분 항상 인지하고 있을 것!

* Repository interface 설계
- 과거의 DAO
- interface를 설계하는 것만으로도 JPA와 관련된 모든 처리 가능
- findAll(), findById() - pk로 1건 찾기, save(), delete(), deleteAll(), count(), exists() 지원
- Repository<T, Id> : 가장 많이 사용하는 인터페이스
- CrudRepository<T, Id> : 단순 CRUD
- PagingAndSortingRepository<T, Id> : 페이징, 검색 기능
- JpaRepository<T, id>


* 다양한 조건으로 조회 - Collection<T> findBy + 속성이름
- 기본기능 제외한 조회기능 추가하고싶으면 규칙에 맞게 메소드 추가
- 참고 링크 : https://docs.spring.io/spring-data/jpa/docs/2.5.1/reference/html/#jpa.query-methods.query-creation
- findBy로 시작하면 쿼리를 요청하는 메소드임을 의미
- countBy로 시작하면 쿼리 결과 레코드 수를 요청하는 메소드임을 의미
- and, or는 여러 필드를 and, or로 검색함을 의미
- like는 startingWith, EndingWith, Containing메소드 이름을 제공

ex) public List<BoardVO> findByTitle<String title);



* Timestamp 형태 사용,
Timestamp time = Timestamp.valueOf("2021-02-16 00:00:00");
- 참고 링크 : https://www.delftstack.com/ko/howto/java/java-string-to-timestamp/


*
plugin -> ui.theme -> default_win 메모장 열어서 맨 마지막에 아래 코드 추가하면 패키지 익스플로러 커짐

#org-eclipse-jdt-ui-PackageExplorer Tree,
#org-eclipse-ui-navigator-ProjectExplorer Tree {
    font-size: 18px; /* <-- Desired font size */
    font-weight: bold;

}
